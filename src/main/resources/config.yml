# The default configuration with preserved comments can be located here
# https://github.com/LMBishop/FoodExpiration/blob/master/src/main/resources/config.yml
# Generated with plugin version ${version}

# --------------------
# Food stages
# --------------------

# The list of all expiry stages a food item can have.
# Please look at the examples of each stage, **the formatting is crucial**.
#
# Values:  (list of)
#          # The name of the stage will have
#          #
#          # Values: <any string value>
#          name: [...]
#          after:
#            # The time where any food item is at this expiration stage.
#            #
#            # Values: <any positive integer>
#            time: [...]
#
#            # The time unit for the above.
#            #
#            # Values: "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS"
#            unit: [...]
#
#          # The multiplier this has on the nutrition has on an item, where 1 means normal.
#          #
#          # Values: <any positive float (decimal)>
#          hunger-modifier: [...]
#
#          # The description of this food item, seen in the lore when hovering over. Use %name% to reference
#          # the name.
#          #
#          # Values: <any string value>
#          description: [...]
#
#          # The extended of this food item, seen in the underneath the description when hovering over.
#          #
#          # Values: <(list of) any string value>
#          extended-description: [...]
#
#          # The effects this item apply to the player if this is consumed.
#          #
#          # Values: (list of)
#          effects:
#                    # The type of potion effect
#                    #
#                    # Values: https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/potion/PotionEffectType.html
#                    type: [...]
#
#                    # The duration of the effect in ticks. 20 ticks = 1 second.
#                    #
#                    # Values: <any positive integer>
#                    duration: [...]
#
#                    # The amplifier of the effect, starting from 0.
#                    #
#                    # Values: <any positive integer>
#                    amplifier: [...]
#
#                    # The likelihood this effect will be applied to the player.
#                    #
#                    # Values: <any float (decimal) between 0 and 1, inclusively>
#                    chance: [...]
#
# Examples:
#  - name: "Spoiled"
#    after:
#      time: 18
#      unit: "HOURS"
#    hunger-modifier: 0.5
#    description: "&6%name%"
#    extended-description:
#      - "&7&oPotentially unsafe food, with"
#      - "&7little nutritional value."
#    effects:
#      - type: "CONFUSION"
#        duration: 120
#        amplifier: 0
#        chance: 0.7
#      - type: "POISON"
#        duration: 60
#        amplifier: 0
#        chance: 0.4
expiry-stages:
  - name: "Fresh"
    after:
      time: 0
      unit: "MILLISECONDS"
    hunger-modifier: 1.25
    description: "&7%name%"
    extended-description:
      - "&7&oTasty and extra nutritious!"

  - name: "Edible"
    after:
      time: 6
      unit: "HOURS"
    hunger-modifier: 1.0
    description: "&7%name%"
    extended-description:
      - "&7&oSuitable and safe to eat."

  - name: "Stale"
    after:
      time: 12
      unit: "HOURS"
    hunger-modifier: 0.75
    description: "&7%name%"
    extended-description:
      - "&7&oNo longer fresh or pleasant to eat."

  - name: "Spoiled"
    after:
      time: 18
      unit: "HOURS"
    hunger-modifier: 0.5
    description: "&6%name%"
    extended-description:
      - "&7&oPotentially unsafe food, with"
      - "&7&olittle nutritional value."
    effects:
      - type: "CONFUSION"
        duration: 120
        amplifier: 0
        chance: 0.7
      - type: "POISON"
        duration: 60
        amplifier: 0
        chance: 0.4

  - name: "Inedible"
    after:
      time: 24
      unit: "HOURS"
    hunger-modifier: 0.0
    description: "&c%name%"
    extended-description:
      - "&7&oNot suitable for consumption."
    effects:
      - type: "CONFUSION"
        duration: 120
        amplifier: 0
      - type: "POISON"
        duration: 100
        amplifier: 1

# --------------------
# General options
# --------------------

# Options here relate to how the plugin considers items to be a food item
food-items:
  # Automatically define what is food and what is not. This includes anything which is edible,
  # which could range from bread to spider eyes, however this depends on the implementation.
  #
  # Values:  true, false
  # Default: true
  auto: true
  # The list of food items on the server. Note that if 'auto' is set to true, this
  # list is ignored and the server decides what constitutes as food.
  #
  # Values:  (list of) https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html
  foods:
    - "COOKED_BEEF"
    - "COOKED_CHICKEN"
    # - "COOKED_RABBIT"
    # and so on ...

# Options here relate to how expiry dates are assigned
rounding:
  # Enable rounding for dates in food. If disabled, this means each food item
  # will be accurate to the millisecond, which effectively means they will never stack.
  #
  # Values:  true, false
  # Default: true
  enabled: true
  # The resolution for rounding. The less accurate the rounding, the more items can stack.
  #
  # Values:  "SECONDS", "MINUTES", "HOURS", "DAYS"
  # Default: "HOURS"
  time-resolution: "HOURS"

# Enable mixing for food items. If enabled, players can merge two food stacks with different
# expiry dates and the older stack will be favoured. You can merge a stack by clicking
# on another stack (of the same type) holding another stack. A sound will play if you
# successfully merge stacks.
#
# Values:  true, false
# Default: true
allow-mixing: true

# Options here relate to how the information about a piece of food is updated
item-refresh:
  # Constantly check the player's inventory for food items and apply expiry dates on an interval.
  # This works on a queue based system to prevent lag, although this can be disabled entirely here and
  # instead lores will only be applied on events.
  #
  # Values:  true, false
  # Default: true
  auto-refresh: true
  # The interval (in ticks) to process the next player in the refresh queue.
  #
  # Values:  <any positive integer>
  # Default: 1
  auto-refresh-time: 1
